// Generated from d:/projects/Private/vscode-ebnf/grammar/EBNFLexer.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class EBNFLexer extends antlr.Lexer {
    public static readonly CONCATENATE_SYMBOL = 1;
    public static readonly DEFINING_SYMBOL = 2;
    public static readonly EXCEPT_SYMBOL = 3;
    public static readonly FIRST_QUOTE_SYMBOL = 4;
    public static readonly REPETITION_SYMBOL = 5;
    public static readonly SECOND_QUOTE_SYMBOL = 6;
    public static readonly SPECIAL_SEQUENCE_SYMBOL = 7;
    public static readonly END_GROUP_SYMBOL = 8;
    public static readonly START_GROUP_SYMBOL = 9;
    public static readonly START_COMMENT_SYMBOL = 10;
    public static readonly END_COMMENT_SYMBOL = 11;
    public static readonly END_OPTION_SYMBOL = 12;
    public static readonly END_REPEAT_SYMBOL = 13;
    public static readonly START_OPTION_SYMBOL = 14;
    public static readonly START_REPEAT_SYMBOL = 15;
    public static readonly DEFINITION_SEPARATOR_SYMBOL = 16;
    public static readonly TERMINATOR_SYMBOL = 17;
    public static readonly OTHER_CHARACTER = 18;
    public static readonly TERMINAL_CHARACTER = 19;
    public static readonly GAP_FREE_SYMBOL = 20;
    public static readonly GAP_FREE_TERMINAL_CHARACTER = 21;
    public static readonly TERMINAL_STRING = 22;
    public static readonly FIRST_TERMINAL_CHARACTER = 23;
    public static readonly SECOND_TERMINAL_CHARACTER = 24;
    public static readonly GAP_SEPARATOR = 25;
    public static readonly COMMENTLESS_SYMBOL = 26;
    public static readonly INTEGER = 27;
    public static readonly META_IDENTIFIER = 28;
    public static readonly SPECIAL_SEQUENCE = 29;
    public static readonly COMMENT_SYMBOL = 30;
    public static readonly BRACKETED_TEXTUAL_COMMENT = 31;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "','", "'='", "'-'", "'''", "'*'", "'\"'", "'?'", "')'", "'('", 
        "'(*'", "'*)'"
    ];

    public static readonly symbolicNames = [
        null, "CONCATENATE_SYMBOL", "DEFINING_SYMBOL", "EXCEPT_SYMBOL", 
        "FIRST_QUOTE_SYMBOL", "REPETITION_SYMBOL", "SECOND_QUOTE_SYMBOL", 
        "SPECIAL_SEQUENCE_SYMBOL", "END_GROUP_SYMBOL", "START_GROUP_SYMBOL", 
        "START_COMMENT_SYMBOL", "END_COMMENT_SYMBOL", "END_OPTION_SYMBOL", 
        "END_REPEAT_SYMBOL", "START_OPTION_SYMBOL", "START_REPEAT_SYMBOL", 
        "DEFINITION_SEPARATOR_SYMBOL", "TERMINATOR_SYMBOL", "OTHER_CHARACTER", 
        "TERMINAL_CHARACTER", "GAP_FREE_SYMBOL", "GAP_FREE_TERMINAL_CHARACTER", 
        "TERMINAL_STRING", "FIRST_TERMINAL_CHARACTER", "SECOND_TERMINAL_CHARACTER", 
        "GAP_SEPARATOR", "COMMENTLESS_SYMBOL", "INTEGER", "META_IDENTIFIER", 
        "SPECIAL_SEQUENCE", "COMMENT_SYMBOL", "BRACKETED_TEXTUAL_COMMENT"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "LETTER", "DECIMAL_DIGIT", "CONCATENATE_SYMBOL", "DEFINING_SYMBOL", 
        "EXCEPT_SYMBOL", "FIRST_QUOTE_SYMBOL", "REPETITION_SYMBOL", "SECOND_QUOTE_SYMBOL", 
        "SPECIAL_SEQUENCE_SYMBOL", "END_GROUP_SYMBOL", "START_GROUP_SYMBOL", 
        "START_COMMENT_SYMBOL", "END_COMMENT_SYMBOL", "END_OPTION_SYMBOL", 
        "END_REPEAT_SYMBOL", "START_OPTION_SYMBOL", "START_REPEAT_SYMBOL", 
        "DEFINITION_SEPARATOR_SYMBOL", "TERMINATOR_SYMBOL", "OTHER_CHARACTER", 
        "SPACE_CHARACTER", "NEW_LINE", "FORM_FEED", "HORIZONTAL_TABULATION_CHARACTER", 
        "VERTICAL_TABULATION_CHARACTER", "TERMINAL_CHARACTER", "GAP_FREE_SYMBOL", 
        "GAP_FREE_TERMINAL_CHARACTER", "TERMINAL_STRING", "FIRST_TERMINAL_CHARACTER", 
        "SECOND_TERMINAL_CHARACTER", "GAP_SEPARATOR", "COMMENTLESS_SYMBOL", 
        "META_IDENTIFIER_CHARACTER", "INTEGER", "META_IDENTIFIER", "SPECIAL_SEQUENCE", 
        "SPECIAL_SEQUENCE_CHARACTER", "COMMENT_SYMBOL", "BRACKETED_TEXTUAL_COMMENT",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, EBNFLexer._ATN, EBNFLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "EBNFLexer.g4"; }

    public get literalNames(): (string | null)[] { return EBNFLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return EBNFLexer.symbolicNames; }
    public get ruleNames(): string[] { return EBNFLexer.ruleNames; }

    public get serializedATN(): number[] { return EBNFLexer._serializedATN; }

    public get channelNames(): string[] { return EBNFLexer.channelNames; }

    public get modeNames(): string[] { return EBNFLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,31,348,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
        1,13,1,13,1,13,3,13,113,8,13,1,14,1,14,1,14,3,14,118,8,14,1,15,1,
        15,1,15,3,15,123,8,15,1,16,1,16,1,16,3,16,128,8,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,5,21,139,8,21,10,21,12,21,142,9,21,
        1,21,1,21,5,21,146,8,21,10,21,12,21,149,9,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,177,8,25,1,26,
        1,26,3,26,181,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,201,8,27,1,28,
        1,28,4,28,205,8,28,11,28,12,28,206,1,28,1,28,1,28,1,28,4,28,213,
        8,28,11,28,12,28,214,1,28,1,28,3,28,219,8,28,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,3,29,240,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,261,
        8,30,1,31,1,31,1,31,1,31,1,31,3,31,268,8,31,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,
        286,8,32,1,33,1,33,1,33,3,33,291,8,33,1,34,4,34,294,8,34,11,34,12,
        34,295,1,35,1,35,5,35,300,8,35,10,35,12,35,303,9,35,1,36,1,36,5,
        36,307,8,36,10,36,12,36,310,9,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,3,37,333,8,37,1,38,1,38,1,38,3,38,338,8,38,1,39,1,39,5,39,
        342,8,39,10,39,12,39,345,9,39,1,39,1,39,0,0,40,1,0,3,0,5,1,7,2,9,
        3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,
        15,35,16,37,17,39,18,41,0,43,0,45,0,47,0,49,0,51,19,53,20,55,21,
        57,22,59,23,61,24,63,25,65,26,67,0,69,27,71,28,73,29,75,0,77,30,
        79,31,1,0,6,2,0,65,90,97,122,1,0,48,57,3,0,33,33,47,47,124,124,2,
        0,46,46,59,59,10,0,32,32,35,38,43,43,58,58,60,60,62,62,64,64,92,
        92,94,96,126,126,2,0,45,45,95,95,465,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,83,
        1,0,0,0,5,85,1,0,0,0,7,87,1,0,0,0,9,89,1,0,0,0,11,91,1,0,0,0,13,
        93,1,0,0,0,15,95,1,0,0,0,17,97,1,0,0,0,19,99,1,0,0,0,21,101,1,0,
        0,0,23,103,1,0,0,0,25,106,1,0,0,0,27,112,1,0,0,0,29,117,1,0,0,0,
        31,122,1,0,0,0,33,127,1,0,0,0,35,129,1,0,0,0,37,131,1,0,0,0,39,133,
        1,0,0,0,41,135,1,0,0,0,43,140,1,0,0,0,45,150,1,0,0,0,47,152,1,0,
        0,0,49,154,1,0,0,0,51,176,1,0,0,0,53,180,1,0,0,0,55,200,1,0,0,0,
        57,218,1,0,0,0,59,239,1,0,0,0,61,260,1,0,0,0,63,267,1,0,0,0,65,285,
        1,0,0,0,67,290,1,0,0,0,69,293,1,0,0,0,71,297,1,0,0,0,73,304,1,0,
        0,0,75,332,1,0,0,0,77,337,1,0,0,0,79,339,1,0,0,0,81,82,7,0,0,0,82,
        2,1,0,0,0,83,84,7,1,0,0,84,4,1,0,0,0,85,86,5,44,0,0,86,6,1,0,0,0,
        87,88,5,61,0,0,88,8,1,0,0,0,89,90,5,45,0,0,90,10,1,0,0,0,91,92,5,
        39,0,0,92,12,1,0,0,0,93,94,5,42,0,0,94,14,1,0,0,0,95,96,5,34,0,0,
        96,16,1,0,0,0,97,98,5,63,0,0,98,18,1,0,0,0,99,100,5,41,0,0,100,20,
        1,0,0,0,101,102,5,40,0,0,102,22,1,0,0,0,103,104,5,40,0,0,104,105,
        5,42,0,0,105,24,1,0,0,0,106,107,5,42,0,0,107,108,5,41,0,0,108,26,
        1,0,0,0,109,113,5,93,0,0,110,111,5,47,0,0,111,113,5,41,0,0,112,109,
        1,0,0,0,112,110,1,0,0,0,113,28,1,0,0,0,114,118,5,125,0,0,115,116,
        5,58,0,0,116,118,5,41,0,0,117,114,1,0,0,0,117,115,1,0,0,0,118,30,
        1,0,0,0,119,123,5,91,0,0,120,121,5,40,0,0,121,123,5,47,0,0,122,119,
        1,0,0,0,122,120,1,0,0,0,123,32,1,0,0,0,124,128,5,123,0,0,125,126,
        5,40,0,0,126,128,5,58,0,0,127,124,1,0,0,0,127,125,1,0,0,0,128,34,
        1,0,0,0,129,130,7,2,0,0,130,36,1,0,0,0,131,132,7,3,0,0,132,38,1,
        0,0,0,133,134,7,4,0,0,134,40,1,0,0,0,135,136,5,32,0,0,136,42,1,0,
        0,0,137,139,5,13,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,
        0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,147,5,10,
        0,0,144,146,5,13,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,
        0,0,147,148,1,0,0,0,148,44,1,0,0,0,149,147,1,0,0,0,150,151,5,12,
        0,0,151,46,1,0,0,0,152,153,5,9,0,0,153,48,1,0,0,0,154,155,5,11,0,
        0,155,50,1,0,0,0,156,177,3,1,0,0,157,177,3,3,1,0,158,177,3,5,2,0,
        159,177,3,7,3,0,160,177,3,35,17,0,161,177,3,25,12,0,162,177,3,19,
        9,0,163,177,3,27,13,0,164,177,3,29,14,0,165,177,3,9,4,0,166,177,
        3,11,5,0,167,177,3,13,6,0,168,177,3,15,7,0,169,177,3,17,8,0,170,
        177,3,23,11,0,171,177,3,21,10,0,172,177,3,31,15,0,173,177,3,33,16,
        0,174,177,3,37,18,0,175,177,3,39,19,0,176,156,1,0,0,0,176,157,1,
        0,0,0,176,158,1,0,0,0,176,159,1,0,0,0,176,160,1,0,0,0,176,161,1,
        0,0,0,176,162,1,0,0,0,176,163,1,0,0,0,176,164,1,0,0,0,176,165,1,
        0,0,0,176,166,1,0,0,0,176,167,1,0,0,0,176,168,1,0,0,0,176,169,1,
        0,0,0,176,170,1,0,0,0,176,171,1,0,0,0,176,172,1,0,0,0,176,173,1,
        0,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,52,1,0,0,0,178,181,3,55,
        27,0,179,181,3,57,28,0,180,178,1,0,0,0,180,179,1,0,0,0,181,54,1,
        0,0,0,182,201,3,1,0,0,183,201,3,3,1,0,184,201,3,5,2,0,185,201,3,
        7,3,0,186,201,3,35,17,0,187,201,3,25,12,0,188,201,3,19,9,0,189,201,
        3,27,13,0,190,201,3,29,14,0,191,201,3,9,4,0,192,201,3,13,6,0,193,
        201,3,17,8,0,194,201,3,23,11,0,195,201,3,21,10,0,196,201,3,31,15,
        0,197,201,3,33,16,0,198,201,3,37,18,0,199,201,3,39,19,0,200,182,
        1,0,0,0,200,183,1,0,0,0,200,184,1,0,0,0,200,185,1,0,0,0,200,186,
        1,0,0,0,200,187,1,0,0,0,200,188,1,0,0,0,200,189,1,0,0,0,200,190,
        1,0,0,0,200,191,1,0,0,0,200,192,1,0,0,0,200,193,1,0,0,0,200,194,
        1,0,0,0,200,195,1,0,0,0,200,196,1,0,0,0,200,197,1,0,0,0,200,198,
        1,0,0,0,200,199,1,0,0,0,201,56,1,0,0,0,202,204,3,11,5,0,203,205,
        3,59,29,0,204,203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,
        1,0,0,0,207,208,1,0,0,0,208,209,3,11,5,0,209,219,1,0,0,0,210,212,
        3,15,7,0,211,213,3,61,30,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,
        1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,3,15,7,0,217,219,
        1,0,0,0,218,202,1,0,0,0,218,210,1,0,0,0,219,58,1,0,0,0,220,240,3,
        1,0,0,221,240,3,3,1,0,222,240,3,5,2,0,223,240,3,7,3,0,224,240,3,
        35,17,0,225,240,3,25,12,0,226,240,3,19,9,0,227,240,3,27,13,0,228,
        240,3,29,14,0,229,240,3,9,4,0,230,240,3,13,6,0,231,240,3,15,7,0,
        232,240,3,17,8,0,233,240,3,23,11,0,234,240,3,21,10,0,235,240,3,31,
        15,0,236,240,3,33,16,0,237,240,3,37,18,0,238,240,3,39,19,0,239,220,
        1,0,0,0,239,221,1,0,0,0,239,222,1,0,0,0,239,223,1,0,0,0,239,224,
        1,0,0,0,239,225,1,0,0,0,239,226,1,0,0,0,239,227,1,0,0,0,239,228,
        1,0,0,0,239,229,1,0,0,0,239,230,1,0,0,0,239,231,1,0,0,0,239,232,
        1,0,0,0,239,233,1,0,0,0,239,234,1,0,0,0,239,235,1,0,0,0,239,236,
        1,0,0,0,239,237,1,0,0,0,239,238,1,0,0,0,240,60,1,0,0,0,241,261,3,
        1,0,0,242,261,3,3,1,0,243,261,3,5,2,0,244,261,3,7,3,0,245,261,3,
        35,17,0,246,261,3,25,12,0,247,261,3,19,9,0,248,261,3,27,13,0,249,
        261,3,29,14,0,250,261,3,9,4,0,251,261,3,11,5,0,252,261,3,13,6,0,
        253,261,3,17,8,0,254,261,3,23,11,0,255,261,3,21,10,0,256,261,3,31,
        15,0,257,261,3,33,16,0,258,261,3,37,18,0,259,261,3,39,19,0,260,241,
        1,0,0,0,260,242,1,0,0,0,260,243,1,0,0,0,260,244,1,0,0,0,260,245,
        1,0,0,0,260,246,1,0,0,0,260,247,1,0,0,0,260,248,1,0,0,0,260,249,
        1,0,0,0,260,250,1,0,0,0,260,251,1,0,0,0,260,252,1,0,0,0,260,253,
        1,0,0,0,260,254,1,0,0,0,260,255,1,0,0,0,260,256,1,0,0,0,260,257,
        1,0,0,0,260,258,1,0,0,0,260,259,1,0,0,0,261,62,1,0,0,0,262,268,3,
        41,20,0,263,268,3,47,23,0,264,268,3,43,21,0,265,268,3,49,24,0,266,
        268,3,45,22,0,267,262,1,0,0,0,267,263,1,0,0,0,267,264,1,0,0,0,267,
        265,1,0,0,0,267,266,1,0,0,0,268,64,1,0,0,0,269,286,3,5,2,0,270,286,
        3,7,3,0,271,286,3,35,17,0,272,286,3,19,9,0,273,286,3,27,13,0,274,
        286,3,29,14,0,275,286,3,9,4,0,276,286,3,13,6,0,277,286,3,21,10,0,
        278,286,3,31,15,0,279,286,3,33,16,0,280,286,3,37,18,0,281,286,3,
        71,35,0,282,286,3,69,34,0,283,286,3,57,28,0,284,286,3,73,36,0,285,
        269,1,0,0,0,285,270,1,0,0,0,285,271,1,0,0,0,285,272,1,0,0,0,285,
        273,1,0,0,0,285,274,1,0,0,0,285,275,1,0,0,0,285,276,1,0,0,0,285,
        277,1,0,0,0,285,278,1,0,0,0,285,279,1,0,0,0,285,280,1,0,0,0,285,
        281,1,0,0,0,285,282,1,0,0,0,285,283,1,0,0,0,285,284,1,0,0,0,286,
        66,1,0,0,0,287,291,3,1,0,0,288,291,3,3,1,0,289,291,7,5,0,0,290,287,
        1,0,0,0,290,288,1,0,0,0,290,289,1,0,0,0,291,68,1,0,0,0,292,294,3,
        3,1,0,293,292,1,0,0,0,294,295,1,0,0,0,295,293,1,0,0,0,295,296,1,
        0,0,0,296,70,1,0,0,0,297,301,3,1,0,0,298,300,3,67,33,0,299,298,1,
        0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,72,1,0,
        0,0,303,301,1,0,0,0,304,308,3,17,8,0,305,307,3,75,37,0,306,305,1,
        0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,1,
        0,0,0,310,308,1,0,0,0,311,312,3,17,8,0,312,74,1,0,0,0,313,333,3,
        1,0,0,314,333,3,3,1,0,315,333,3,5,2,0,316,333,3,7,3,0,317,333,3,
        35,17,0,318,333,3,25,12,0,319,333,3,19,9,0,320,333,3,27,13,0,321,
        333,3,29,14,0,322,333,3,9,4,0,323,333,3,11,5,0,324,333,3,13,6,0,
        325,333,3,15,7,0,326,333,3,23,11,0,327,333,3,21,10,0,328,333,3,31,
        15,0,329,333,3,33,16,0,330,333,3,37,18,0,331,333,3,39,19,0,332,313,
        1,0,0,0,332,314,1,0,0,0,332,315,1,0,0,0,332,316,1,0,0,0,332,317,
        1,0,0,0,332,318,1,0,0,0,332,319,1,0,0,0,332,320,1,0,0,0,332,321,
        1,0,0,0,332,322,1,0,0,0,332,323,1,0,0,0,332,324,1,0,0,0,332,325,
        1,0,0,0,332,326,1,0,0,0,332,327,1,0,0,0,332,328,1,0,0,0,332,329,
        1,0,0,0,332,330,1,0,0,0,332,331,1,0,0,0,333,76,1,0,0,0,334,338,3,
        79,39,0,335,338,3,39,19,0,336,338,3,65,32,0,337,334,1,0,0,0,337,
        335,1,0,0,0,337,336,1,0,0,0,338,78,1,0,0,0,339,343,3,23,11,0,340,
        342,3,77,38,0,341,340,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,
        344,1,0,0,0,344,346,1,0,0,0,345,343,1,0,0,0,346,347,3,25,12,0,347,
        80,1,0,0,0,24,0,112,117,122,127,140,147,176,180,200,206,214,218,
        239,260,267,285,290,295,301,308,332,337,343,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!EBNFLexer.__ATN) {
            EBNFLexer.__ATN = new antlr.ATNDeserializer().deserialize(EBNFLexer._serializedATN);
        }

        return EBNFLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(EBNFLexer.literalNames, EBNFLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return EBNFLexer.vocabulary;
    }

    private static readonly decisionsToDFA = EBNFLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}