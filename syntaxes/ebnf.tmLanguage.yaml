name: EBNF
scopeName: source.ebnf
fileTypes: [ebnf]
uuid: 18f41b05-a72e-43ad-b5a5-508ce8fbafbc

patterns:
  - include: '#syntax'

repository:
    concatenate-symbol:
        name: keyword.operator.concatenate.ebnf
        match: ','

    defining-symbol:
        name: keyword.operator.define.ebnf
        match: '='

    definition-separator-symbol:
        name: keyword.operator.separator.ebnf
        match: '(\||/|!)'

    except-symbol:
        name: keyword.operator.except.ebnf
        match: '\-'
    
    repetition-symbol:
        name: keyword.operator.repeat.ebnf
        match: '\*'

    integer:
        name: constant.numeric.ebnf
        match: '\b[0-9]+\b'

    meta-identifier:
        comment: A <meta identifier> is the name of a syntactic element of the language being defined
        name: entity.name.function.ebnf
        match: '\b(?:[a-zA-Z][a-zA-Z0-9_-]*)\b'

    terminal-string:
        name: string.quoted.single.ebnf
        match: (\'([a-zA-Z0-9,=\|/!\(\)\[\]\{\}\<\>\*\-\?;\. :\+_%@#\&\$\\\^~"])*\')|(\"([a-zA-Z0-9,=\|/!\(\)\[\]\{\}\<\>\*\-\?;\. :\+_%@#\&\$\\\^~\'])*\")

    special-sequence:
        comment: The meaning of a <special sequence> is not defined in the standard metalanguage.
        name: string.quoted.other.ebnf
        match: (\?[a-zA-Z0-9,=\|/!\(\)\[\]\{\}\<\>\*\-;\. :\+_%@#\&\$\\\^~\'\"]\?)

    syntax:
        name: meta.syntax.ebnf
        patterns:
            - include: '#comment-block'
            - include: '#syntax-rule'

    comment-block:
        comment: A comment is allowed anywhere outside a <terminal string>, <meta identifier>, <integer> or <special sequence>
        name: comment.block.ebnf
        begin: '\(\*'
        end: '\*\)'
        patterns:
            - include: '#comment-content'

    comment-content:
        patterns:
            - include: '#comment-block'  # For nested comments
            - name: comment.block.content.ebnf
              match: '.'

    syntax-rule:
        comment: A <syntax rule> defines the sequences of symbols represented by a <meta identifier>
        name: meta.syntax.rule.ebnf
        begin: '^((?:[a-zA-Z])(?:[a-zA-Z0-9_-])*)(?:\s)*(=)*(?:\s)*'
        beginCaptures:
            '1': { name: keyword.other.syntax.rule.ebnf }
            '2': { name: keyword.operator.assignment.ebnf }
        end: '[;\.]'
        patterns:
            - include: '#comment-block'
            - include: '#definitions-list'

    definitions-list:
        comment: Vertical bar separates alternative <single definitions>
        name: meta.definitions.list.ebnf
        patterns:
            - include: '#single-definition'
            - include: '#definition-separator-symbol'

    single-definition:
        comment: Comma separates successive <terms>
        name: meta.definitions.single.ebnf
        patterns:
            - include: '#term'
            - include: '#concatenate-symbol'

    term:
        comment: A <term> represents any sequence of symbols that is defined by the <factor> but not defined by the <exception>
        name: meta.term.ebnf
        patterns:
            - include: '#factor'
            - include: '#except-symbol'
            - include: '#exception-rule'

    exception-rule:
        name: meta.exception.ebnf
        patterns:
            - include: '#factor'

    factor:
        comment: The <integer> specifies the number of repetitions of the <primary>
        name: meta.factor.ebnf
        patterns:
            - include: '#integer'
            - include: '#repetition-symbol'
            - include: '#primary'

    primary:
        name: meta.primary.ebnf
        patterns:
            - include: '#optional-sequence'
            - include: '#repeated-sequence'
            - include: '#grouped-sequence'
            - include: '#meta-identifier'
            - include: '#terminal-string'
            - include: '#special-sequence'

    optional-sequence:
        comment: The brackets [ and ] or (/ and /) enclose symbols which are optional
        name: meta.sequence.optional.ebnf
        begin: '(\[|\(\/)'
        beginCaptures: 
            '1': { name: meta.brace.square.ebnf }
        end: '(\]|\/\))'
        endCaptures: 
            '1': { name: meta.brace.square.ebnf }
        patterns:
            - include: '#definitions-list'

    repeated-sequence:
        comment: "The brackets { and } or (: and :) enclose symbols which may be repeated any number of times"
        name: meta.sequence.repeated.ebnf
        begin: '(\{|\(:)'
        beginCaptures: 
            '1': { name: meta.brace.curly.ebnf }
        end: '(\}|:\))'
        endCaptures: 
            '1': { name: meta.brace.curly.ebnf }
        patterns:
            - include: '#definitions-list'

    grouped-sequence:
        comment: The brackets ( and ) allow any <definitions list> to be a <primary>
        name: meta.sequence.grouped.ebnf
        begin: '\('
        beginCaptures: 
            '1': { name: meta.brace.round.ebnf }
        end: '\)'
        endCaptures: 
            '1': { name: meta.brace.round.ebnf }
        patterns:
            - include: '#definitions-list'